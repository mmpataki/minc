Grammar

    0 $accept: program $end

    1 program: program declaration
    2        | program expr
    3        | %empty

    4 expr: expr '+' expr
    5     | expr '*' expr
    6     | id '=' expr
    7     | funcall
    8     | id
    9     | NUM

   10 funcall: id '(' arg_list ')'

   11 arg_list: arg_list ',' ID
   12         | ID
   13         | %empty

   14 id: ID

   15 declaration: type array_refs
   16            | type ID '(' formal_params ')' ';'
   17            | DEFINE ID constant

   18 constant: NUM
   19         | SCONST

   20 formal_params: type ID
   21              | type ID ',' formal_params
   22              | declaration

   23 array_refs: array_refs ',' array_ref
   24           | array_ref

   25 array_ref: ID pars

   26 pars: '[' NUM ']'
   27     | pars '[' NUM ']'

   28 type: INT
   29     | CHAR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 16
')' (41) 10 16
'*' (42) 5
'+' (43) 4
',' (44) 11 21 23
';' (59) 16
'=' (61) 6
'[' (91) 26 27
']' (93) 26 27
error (256)
NUM (258) 9 18 26 27
ID (259) 11 12 14 16 17 20 21 25
INT (260) 28
CHAR (261) 29
DEFINE (262) 17
SCONST (263) 19


Nonterminals, with rules where they appear

$accept (18)
    on left: 0
program (19)
    on left: 1 2 3, on right: 0 1 2
expr (20)
    on left: 4 5 6 7 8 9, on right: 2 4 5 6
funcall (21)
    on left: 10, on right: 7
arg_list (22)
    on left: 11 12 13, on right: 10 11
id (23)
    on left: 14, on right: 6 8 10
declaration (24)
    on left: 15 16 17, on right: 1 22
constant (25)
    on left: 18 19, on right: 17
formal_params (26)
    on left: 20 21 22, on right: 16 21
array_refs (27)
    on left: 23 24, on right: 15 23
array_ref (28)
    on left: 25, on right: 23 24
pars (29)
    on left: 26 27, on right: 25 27
type (30)
    on left: 28 29, on right: 15 16 20 21


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . declaration
    2        | program . expr

    $end    shift, and go to state 2
    NUM     shift, and go to state 3
    ID      shift, and go to state 4
    INT     shift, and go to state 5
    CHAR    shift, and go to state 6
    DEFINE  shift, and go to state 7

    expr         go to state 8
    funcall      go to state 9
    id           go to state 10
    declaration  go to state 11
    type         go to state 12


State 2

    0 $accept: program $end .

    $default  accept


State 3

    9 expr: NUM .

    $default  reduce using rule 9 (expr)


State 4

   14 id: ID .

    $default  reduce using rule 14 (id)


State 5

   28 type: INT .

    $default  reduce using rule 28 (type)


State 6

   29 type: CHAR .

    $default  reduce using rule 29 (type)


State 7

   17 declaration: DEFINE . ID constant

    ID  shift, and go to state 13


State 8

    2 program: program expr .
    4 expr: expr . '+' expr
    5     | expr . '*' expr

    '+'  shift, and go to state 14
    '*'  shift, and go to state 15

    $default  reduce using rule 2 (program)


State 9

    7 expr: funcall .

    $default  reduce using rule 7 (expr)


State 10

    6 expr: id . '=' expr
    8     | id .
   10 funcall: id . '(' arg_list ')'

    '='  shift, and go to state 16
    '('  shift, and go to state 17

    $default  reduce using rule 8 (expr)


State 11

    1 program: program declaration .

    $default  reduce using rule 1 (program)


State 12

   15 declaration: type . array_refs
   16            | type . ID '(' formal_params ')' ';'

    ID  shift, and go to state 18

    array_refs  go to state 19
    array_ref   go to state 20


State 13

   17 declaration: DEFINE ID . constant

    NUM     shift, and go to state 21
    SCONST  shift, and go to state 22

    constant  go to state 23


State 14

    4 expr: expr '+' . expr

    NUM  shift, and go to state 3
    ID   shift, and go to state 4

    expr     go to state 24
    funcall  go to state 9
    id       go to state 10


State 15

    5 expr: expr '*' . expr

    NUM  shift, and go to state 3
    ID   shift, and go to state 4

    expr     go to state 25
    funcall  go to state 9
    id       go to state 10


State 16

    6 expr: id '=' . expr

    NUM  shift, and go to state 3
    ID   shift, and go to state 4

    expr     go to state 26
    funcall  go to state 9
    id       go to state 10


State 17

   10 funcall: id '(' . arg_list ')'

    ID  shift, and go to state 27

    $default  reduce using rule 13 (arg_list)

    arg_list  go to state 28


State 18

   16 declaration: type ID . '(' formal_params ')' ';'
   25 array_ref: ID . pars

    '('  shift, and go to state 29
    '['  shift, and go to state 30

    pars  go to state 31


State 19

   15 declaration: type array_refs .
   23 array_refs: array_refs . ',' array_ref

    ','  shift, and go to state 32

    $default  reduce using rule 15 (declaration)


State 20

   24 array_refs: array_ref .

    $default  reduce using rule 24 (array_refs)


State 21

   18 constant: NUM .

    $default  reduce using rule 18 (constant)


State 22

   19 constant: SCONST .

    $default  reduce using rule 19 (constant)


State 23

   17 declaration: DEFINE ID constant .

    $default  reduce using rule 17 (declaration)


State 24

    4 expr: expr . '+' expr
    4     | expr '+' expr .
    5     | expr . '*' expr

    '*'  shift, and go to state 15

    $default  reduce using rule 4 (expr)


State 25

    4 expr: expr . '+' expr
    5     | expr . '*' expr
    5     | expr '*' expr .

    $default  reduce using rule 5 (expr)


State 26

    4 expr: expr . '+' expr
    5     | expr . '*' expr
    6     | id '=' expr .

    '+'  shift, and go to state 14
    '*'  shift, and go to state 15

    $default  reduce using rule 6 (expr)


State 27

   12 arg_list: ID .

    $default  reduce using rule 12 (arg_list)


State 28

   10 funcall: id '(' arg_list . ')'
   11 arg_list: arg_list . ',' ID

    ')'  shift, and go to state 33
    ','  shift, and go to state 34


State 29

   16 declaration: type ID '(' . formal_params ')' ';'

    INT     shift, and go to state 5
    CHAR    shift, and go to state 6
    DEFINE  shift, and go to state 7

    declaration    go to state 35
    formal_params  go to state 36
    type           go to state 37


State 30

   26 pars: '[' . NUM ']'

    NUM  shift, and go to state 38


State 31

   25 array_ref: ID pars .
   27 pars: pars . '[' NUM ']'

    '['  shift, and go to state 39

    $default  reduce using rule 25 (array_ref)


State 32

   23 array_refs: array_refs ',' . array_ref

    ID  shift, and go to state 40

    array_ref  go to state 41


State 33

   10 funcall: id '(' arg_list ')' .

    $default  reduce using rule 10 (funcall)


State 34

   11 arg_list: arg_list ',' . ID

    ID  shift, and go to state 42


State 35

   22 formal_params: declaration .

    $default  reduce using rule 22 (formal_params)


State 36

   16 declaration: type ID '(' formal_params . ')' ';'

    ')'  shift, and go to state 43


State 37

   15 declaration: type . array_refs
   16            | type . ID '(' formal_params ')' ';'
   20 formal_params: type . ID
   21              | type . ID ',' formal_params

    ID  shift, and go to state 44

    array_refs  go to state 19
    array_ref   go to state 20


State 38

   26 pars: '[' NUM . ']'

    ']'  shift, and go to state 45


State 39

   27 pars: pars '[' . NUM ']'

    NUM  shift, and go to state 46


State 40

   25 array_ref: ID . pars

    '['  shift, and go to state 30

    pars  go to state 31


State 41

   23 array_refs: array_refs ',' array_ref .

    $default  reduce using rule 23 (array_refs)


State 42

   11 arg_list: arg_list ',' ID .

    $default  reduce using rule 11 (arg_list)


State 43

   16 declaration: type ID '(' formal_params ')' . ';'

    ';'  shift, and go to state 47


State 44

   16 declaration: type ID . '(' formal_params ')' ';'
   20 formal_params: type ID .
   21              | type ID . ',' formal_params
   25 array_ref: ID . pars

    '('  shift, and go to state 29
    ','  shift, and go to state 48
    '['  shift, and go to state 30

    $default  reduce using rule 20 (formal_params)

    pars  go to state 31


State 45

   26 pars: '[' NUM ']' .

    $default  reduce using rule 26 (pars)


State 46

   27 pars: pars '[' NUM . ']'

    ']'  shift, and go to state 49


State 47

   16 declaration: type ID '(' formal_params ')' ';' .

    $default  reduce using rule 16 (declaration)


State 48

   21 formal_params: type ID ',' . formal_params

    INT     shift, and go to state 5
    CHAR    shift, and go to state 6
    DEFINE  shift, and go to state 7

    declaration    go to state 35
    formal_params  go to state 50
    type           go to state 37


State 49

   27 pars: pars '[' NUM ']' .

    $default  reduce using rule 27 (pars)


State 50

   21 formal_params: type ID ',' formal_params .

    $default  reduce using rule 21 (formal_params)
